{"version":3,"sources":["components/CurrencyPrices.jsx","components/CurrencyConverter.jsx","App.jsx","reportWebVitals.jsx","index.jsx"],"names":["CurrencyPrices","props","ratesRows","item","currencyData","push","CurrencyConverter","ratesData","useState","rubValue","setRub","foreignCurrencyValue","setForeignCurrencyValue","Object","keys","currentForeignCurrency","setForeignCurrency","isRubInputDisabled","setRubDisabled","isForeignCurrencyInputDisabled","setFCDisabled","optionsRender","currency","value","currencyInputHandler","event","target","name","id","onChange","type","onInput","disabled","colSpan","style","width","onClick","tmp","updateRates","App","currencyRateJson","setCurrencyRate","useEffect","fetch","then","response","json","result","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efcabe29.chunk.js","sourcesContent":["// Component that renders all current values of currencies\r\n\r\nfunction CurrencyPrices(props) {\r\n\r\n    let ratesRows = []\r\n\r\n    for (let item in props.currencyData[\"rates\"]) {\r\n        ratesRows.push(\r\n            <tr key={item}>\r\n                <td>{item}</td>\r\n                <td>{props.currencyData[\"rates\"][item]}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Currency</th>\r\n                    <th>Value</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {ratesRows}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default CurrencyPrices","import { useState } from \"react\"\r\n\r\n\r\nfunction CurrencyConverter(props) {\r\n    const ratesData = props.currencyData[\"rates\"]\r\n\r\n\r\n    const [rubValue, setRub] = useState(0)\r\n    const [foreignCurrencyValue, setForeignCurrencyValue] = useState(0)\r\n    const [currentForeignCurrency, setForeignCurrency] = useState(Object.keys(ratesData)[0])\r\n    const [isRubInputDisabled, setRubDisabled] = useState(false)\r\n    const [isForeignCurrencyInputDisabled, setFCDisabled] = useState(true)\r\n\r\n\r\n    const optionsRender = []\r\n    for (let currency in ratesData) {\r\n        optionsRender.push(<option value={currency} key={currency}>{currency}</option>)\r\n    }\r\n\r\n    function currencyInputHandler(event){\r\n        if (event.target.name === \"rubles\"){\r\n            setRub(event.target.value)\r\n            setForeignCurrencyValue(event.target.value * ratesData[currentForeignCurrency])\r\n        }else{\r\n            setForeignCurrencyValue(event.target.value)\r\n            setRub(event.target.value / ratesData[currentForeignCurrency])\r\n        }\r\n    }\r\n\r\n    function foreignCurrencyChangeHandler(event){\r\n        setForeignCurrency(event.target.value)\r\n        \r\n        if (isRubInputDisabled){\r\n            setForeignCurrencyValue(foreignCurrencyValue)\r\n            setRub(foreignCurrencyValue / ratesData[currentForeignCurrency])\r\n        } else{\r\n            setRub(rubValue)\r\n            setForeignCurrencyValue(rubValue * ratesData[currentForeignCurrency])\r\n        }\r\n\r\n    }\r\n\r\n    function swapHandler(event){\r\n        const tmp = isRubInputDisabled\r\n        setRubDisabled(isForeignCurrencyInputDisabled)\r\n        setFCDisabled(tmp)\r\n    }\r\n\r\n    function updateRatesHandler(event){\r\n        props.updateRates()\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td>RUB</td>\r\n                    <td>\r\n                        <select name=\"currencies\" id=\"currency-selector\" onChange={foreignCurrencyChangeHandler}>\r\n                            {optionsRender}\r\n                        </select>\r\n                    </td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <input type=\"number\" name=\"rubles\" id=\"ruble-input\" value={rubValue} onInput={currencyInputHandler} disabled={isRubInputDisabled} />\r\n                    </td>\r\n                    <td>\r\n                        <input type=\"number\" name=\"current-currency-output\" id=\"custom-currency-output\" value={foreignCurrencyValue} onInput={currencyInputHandler} disabled={isForeignCurrencyInputDisabled} />\r\n                    </td>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td colSpan=\"2\">\r\n                        <button style={{ width: '100%' }} id=\"swap-button\" onClick={swapHandler}>Swap</button>\r\n                    </td>\r\n                </tr>\r\n\r\n                <tr>\r\n                    <td colSpan=\"2\">\r\n                        <button style={{ width: '100%' }} id=\"update-button\" onClick={updateRatesHandler}>Update rates</button>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default CurrencyConverter","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport CurrencyPrices from './components/CurrencyPrices';\nimport CurrencyConverter from './components/CurrencyConverter'  \n\nfunction App() {\n\n  const [currencyRateJson, setCurrencyRate] = useState()\n\n  useEffect(() => fetch(\"https://www.cbr-xml-daily.ru/latest.js\").then(response => response.json()).then(result => {\n    setCurrencyRate(result)\n  }), [] )\n\n  function updateRates(){\n    fetch(\"https://www.cbr-xml-daily.ru/latest.js\").then(response => response.json()).then(result => {setCurrencyRate(result)})\n  }\n\n\n  return currencyRateJson ? (\n    <>\n      <CurrencyConverter currencyData = {currencyRateJson} updateRates={updateRates}/>\n      <CurrencyPrices currencyData = {currencyRateJson}/>\n    </>\n  ) : <></>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}