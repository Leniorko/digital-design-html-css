{"version":3,"sources":["components/CurrencyPrices.jsx","components/CurrencyConverter.jsx","App.jsx","reportWebVitals.jsx","index.jsx"],"names":["CurrencyPrices","props","ratesRows","item","currencyData","push","CurrencyConverter","ratesData","useState","rubValue","setRub","foreignCurrencyValue","setForeignCurrencyValue","Object","keys","currentForeignCurrency","setForeignCurrency","isRubInputDisabled","setRubDisabled","isForeignCurrencyInputDisabled","setFCDisabled","optionsRender","currency","value","currencyInputHandler","event","target","name","id","onChange","type","onInput","disabled","colSpan","style","width","onClick","tmp","updateRates","App","currencyRateJson","setCurrencyRate","useEffect","fetch","then","response","json","result","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOA8BeA,MA5Bf,SAAwBC,GAEpB,IAAIC,EAAY,GAEhB,IAAK,IAAIC,KAAQF,EAAMG,aAAN,MACbF,EAAUG,KACN,+BACI,6BAAKF,IACL,6BAAKF,EAAMG,aAAN,MAA4BD,OAF5BA,IAOjB,OACI,kCACI,gCACI,+BACI,0CACA,4CAGR,gCACKD,QCoGFI,MA1Hf,SAA2BL,GACzB,IAAMM,EAAYN,EAAMG,aAAN,MADc,EAGLI,mBAAS,GAHJ,mBAGzBC,EAHyB,KAGfC,EAHe,OAIwBF,mBAAS,GAJjC,mBAIzBG,EAJyB,KAIHC,EAJG,OAKqBJ,mBACnDK,OAAOC,KAAKP,GAAW,IANO,mBAKzBQ,EALyB,KAKDC,EALC,OAQaR,oBAAS,GARtB,mBAQzBS,EARyB,KAQLC,EARK,OASwBV,oBAAS,GATjC,mBASzBW,EATyB,KASOC,EATP,KAW1BC,EAAgB,GACtB,IAAK,IAAIC,KAAYf,EACnBc,EAAchB,KACZ,wBAAQkB,MAAOD,EAAf,SACGA,GAD2BA,IAMlC,SAASE,EAAqBC,GACF,WAAtBA,EAAMC,OAAOC,MACfjB,EAAOe,EAAMC,OAAOH,OACpBX,EACEa,EAAMC,OAAOH,MAAQhB,EAAUQ,MAGjCH,EAAwBa,EAAMC,OAAOH,OACrCb,EAAOe,EAAMC,OAAOH,MAAQhB,EAAUQ,KA0B1C,OACE,kCACE,gCACE,+BACE,qCACA,6BACE,wBACEY,KAAK,aACLC,GAAG,oBACHC,SA/BZ,SAAsCJ,GACpCT,EAAmBS,EAAMC,OAAOH,OAE5BN,GACFL,EAAwBD,GACxBD,EAAOC,EAAuBJ,EAAUQ,MAExCL,EAAOD,GACPG,EAAwBH,EAAWF,EAAUQ,MAoBvC,SAKGM,WAKT,kCACE,+BACE,6BACE,uBACES,KAAK,SACLH,KAAK,SACLC,GAAG,cACHL,MAAOd,EACPsB,QAASP,EACTQ,SAAUf,MAGd,6BACE,uBACEa,KAAK,SACLH,KAAK,0BACLC,GAAG,yBACHL,MAAOZ,EACPoB,QAASP,EACTQ,SAAUb,SAKhB,6BACE,oBAAIc,QAAQ,IAAZ,SACE,wBACEC,MAAO,CAAEC,MAAO,QAChBP,GAAG,cACHQ,QAvDZ,SAAqBX,GACnB,IAAMY,EAAMpB,EACZC,EAAeC,GACfC,EAAciB,IAiDN,sBAUJ,6BACE,oBAAIJ,QAAQ,IAAZ,SACE,wBACEC,MAAO,CAAEC,MAAO,QAChBP,GAAG,gBACHQ,QA7DZ,SAA4BX,GAC1BxB,EAAMqC,eAyDE,qCCvEGC,MAlCf,WAAgB,IAAD,EAC+B/B,qBAD/B,mBACNgC,EADM,KACYC,EADZ,KAqBb,OAlBAC,qBACE,kBACEC,MAAM,0CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLN,EAAgBM,QAEtB,IAWKP,EACL,qCACE,cAAC,EAAD,CACEpC,aAAcoC,EACdF,YAZN,WACEK,MAAM,0CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLN,EAAgBM,SAUlB,cAAC,EAAD,CAAgB3C,aAAcoC,OAGhC,8BCvBWQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7d18dbd9.chunk.js","sourcesContent":["// Component that renders all current values of currencies\r\n\r\nfunction CurrencyPrices(props) {\r\n\r\n    let ratesRows = []\r\n\r\n    for (let item in props.currencyData[\"rates\"]) {\r\n        ratesRows.push(\r\n            <tr key={item}>\r\n                <td>{item}</td>\r\n                <td>{props.currencyData[\"rates\"][item]}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Currency</th>\r\n                    <th>Value</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {ratesRows}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default CurrencyPrices","import { useState } from \"react\";\r\n\r\nfunction CurrencyConverter(props) {\r\n  const ratesData = props.currencyData[\"rates\"];\r\n\r\n  const [rubValue, setRub] = useState(0);\r\n  const [foreignCurrencyValue, setForeignCurrencyValue] = useState(0);\r\n  const [currentForeignCurrency, setForeignCurrency] = useState(\r\n    Object.keys(ratesData)[0]\r\n  );\r\n  const [isRubInputDisabled, setRubDisabled] = useState(false);\r\n  const [isForeignCurrencyInputDisabled, setFCDisabled] = useState(true);\r\n\r\n  const optionsRender = [];\r\n  for (let currency in ratesData) {\r\n    optionsRender.push(\r\n      <option value={currency} key={currency}>\r\n        {currency}\r\n      </option>\r\n    );\r\n  }\r\n\r\n  function currencyInputHandler(event) {\r\n    if (event.target.name === \"rubles\") {\r\n      setRub(event.target.value);\r\n      setForeignCurrencyValue(\r\n        event.target.value * ratesData[currentForeignCurrency]\r\n      );\r\n    } else {\r\n      setForeignCurrencyValue(event.target.value);\r\n      setRub(event.target.value / ratesData[currentForeignCurrency]);\r\n    }\r\n  }\r\n\r\n  function foreignCurrencyChangeHandler(event) {\r\n    setForeignCurrency(event.target.value);\r\n\r\n    if (isRubInputDisabled) {\r\n      setForeignCurrencyValue(foreignCurrencyValue);\r\n      setRub(foreignCurrencyValue / ratesData[currentForeignCurrency]);\r\n    } else {\r\n      setRub(rubValue);\r\n      setForeignCurrencyValue(rubValue * ratesData[currentForeignCurrency]);\r\n    }\r\n  }\r\n\r\n  function swapHandler(event) {\r\n    const tmp = isRubInputDisabled;\r\n    setRubDisabled(isForeignCurrencyInputDisabled);\r\n    setFCDisabled(tmp);\r\n  }\r\n\r\n  function updateRatesHandler(event) {\r\n    props.updateRates();\r\n  }\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <td>RUB</td>\r\n          <td>\r\n            <select\r\n              name=\"currencies\"\r\n              id=\"currency-selector\"\r\n              onChange={foreignCurrencyChangeHandler}\r\n            >\r\n              {optionsRender}\r\n            </select>\r\n          </td>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>\r\n            <input\r\n              type=\"number\"\r\n              name=\"rubles\"\r\n              id=\"ruble-input\"\r\n              value={rubValue}\r\n              onInput={currencyInputHandler}\r\n              disabled={isRubInputDisabled}\r\n            />\r\n          </td>\r\n          <td>\r\n            <input\r\n              type=\"number\"\r\n              name=\"current-currency-output\"\r\n              id=\"custom-currency-output\"\r\n              value={foreignCurrencyValue}\r\n              onInput={currencyInputHandler}\r\n              disabled={isForeignCurrencyInputDisabled}\r\n            />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td colSpan=\"2\">\r\n            <button\r\n              style={{ width: \"100%\" }}\r\n              id=\"swap-button\"\r\n              onClick={swapHandler}\r\n            >\r\n              Swap\r\n            </button>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td colSpan=\"2\">\r\n            <button\r\n              style={{ width: \"100%\" }}\r\n              id=\"update-button\"\r\n              onClick={updateRatesHandler}\r\n            >\r\n              Update rates\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default CurrencyConverter;\r\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport CurrencyPrices from \"./components/CurrencyPrices\";\nimport CurrencyConverter from \"./components/CurrencyConverter\";\n\nfunction App() {\n  const [currencyRateJson, setCurrencyRate] = useState();\n\n  useEffect(\n    () =>\n      fetch(\"https://www.cbr-xml-daily.ru/latest.js\")\n        .then((response) => response.json())\n        .then((result) => {\n          setCurrencyRate(result);\n        }),\n    []\n  );\n\n  function updateRates() {\n    fetch(\"https://www.cbr-xml-daily.ru/latest.js\")\n      .then((response) => response.json())\n      .then((result) => {\n        setCurrencyRate(result);\n      });\n  }\n\n  return currencyRateJson ? (\n    <>\n      <CurrencyConverter\n        currencyData={currencyRateJson}\n        updateRates={updateRates}\n      />\n      <CurrencyPrices currencyData={currencyRateJson} />\n    </>\n  ) : (\n    <></>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}